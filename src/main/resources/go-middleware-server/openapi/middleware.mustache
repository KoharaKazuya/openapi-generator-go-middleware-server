{{>openapi/partial_header}}
package {{packageName}}
{{#apiInfo}}

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"path/filepath"
	"time"

	"github.com/getkin/kin-openapi/openapi3filter"
	"github.com/go-chi/chi"
)

// NewMiddleware は新しく Middleware を生成する
// Middleware は `func(http.Handler) http.Handler` のシグネチャを持つ関数
func NewMiddleware(optionFuncs ...MiddlewareOption) (func(http.Handler) http.Handler, error) {
	options := middlewareOptions{
		errorLogger:      func(err error) { log.Printf("%+v\n", err) },
	}
	for _, f := range optionFuncs {
		if err := f(&options); err != nil {
			return nil, err
		}
	}

	return func(next http.Handler) http.Handler {
		kinRouter := openapi3filter.NewRouter().WithSwagger(loadOpenAPIDocument())
		router := chi.NewRouter()

		router.NotFound(next.ServeHTTP)
		router.MethodNotAllowed(next.ServeHTTP)

{{#apis}}{{#operations}}		// {{classname}}
{{#operation}}		router.{{httpMethod}}("{{{basePathWithoutHost}}}{{{path}}}", func(w http.ResponseWriter, req *http.Request) {
			// make sure action implemented
			if options.actions.{{nickname}} == nil {
				writeJSONActionNotImplemented(w, options.errorLogger, "{{nickname}}")
				return
			}

			// validate request
			kinRoute, pathParams, err := kinRouter.FindRoute(req.Method, req.URL)
			if err != nil {
				options.errorLogger(newKinFindRouteError(req, err))
				writeJSONInternalServerError(w, options.errorLogger)
				return
			}
			if err := openapi3filter.ValidateRequest(
				req.Context(),
				&openapi3filter.RequestValidationInput{
					Request:    req,
					PathParams: pathParams,
					Route:      kinRoute,
				},
			); err != nil {
				writeJSON(w, http.StatusBadRequest, ErrorResponse{
					Title:  "Invalid Request",
					Detail: err.Error(),
				}, options.errorLogger)
				return
			}

			// get path parameters
{{#pathParams}}			var {{paramName}} {{dataType}}
			{{paramName}}Str := chi.URLParam(req, "{{paramName}}")
			if err := cast({{paramName}}Str, &{{paramName}}); err != nil {
				writeJSON(w, http.StatusBadRequest, ErrorResponse{
					Title:  "Invalid Path Parameter",
					Detail: "Path parameter `{{paramName}}` must be a {{dataType}}, but \"" + {{paramName}}Str + "\" specified.\n" + err.Error(),
				}, options.errorLogger)
				return
			}
{{/pathParams}}

			// get query parameters
{{#queryParams}}			var {{paramName}} {{dataType}}
			{{paramName}}Str := req.URL.Query(){{#isListContainer}}["{{paramName}}"]{{/isListContainer}}{{^isListContainer}}.Get("{{paramName}}"){{/isListContainer}}
			if err := cast{{#isListContainer}}Array{{/isListContainer}}({{paramName}}Str, &{{paramName}}); err != nil {
				writeJSON(w, http.StatusBadRequest, ErrorResponse{
					Title:  "Invalid Query Parameter",
					Detail: "Query parameter `{{paramName}}` must be a {{dataType}}, but " + fmt.Sprintf("%#v", {{paramName}}Str) + " specified.\n" + err.Error(),
				}, options.errorLogger)
				return
			}
{{/queryParams}}

			// get request body
{{#bodyParam}}			var {{paramName}} {{dataType}}
			if err := json.NewDecoder(req.Body).Decode(&{{paramName}}); err != nil {
				options.errorLogger(newJSONDeserializationError(req, err))
				writeJSONInternalServerError(w, options.errorLogger)
				return
			}
{{/bodyParam}}

			// invoke action
			actionResult, err := options.actions.{{nickname}}(req.Context(){{#pathParams}}, {{paramName}}{{/pathParams}}{{#queryParams}}, {{paramName}}{{/queryParams}}{{#bodyParam}}, {{paramName}}{{/bodyParam}})

			// generate http response
			if err != nil {
				options.errorLogger(newActionError(req, err))
				writeJSONInternalServerError(w, options.errorLogger)
				return
			}
			switch r := actionResult.(type) {
{{#responses}}			case {{#vendorExtensions}}{{x-responseDataType}}{{/vendorExtensions}}:
				{{#dataType}}writeJSON(w, {{code}}, r.Body, options.errorLogger){{/dataType}}{{^dataType}}w.WriteHeader({{code}}){{/dataType}}
{{/responses}}
			default:
				_ = r // no use error avoiding hack
				options.errorLogger(newUnknownTypeActionResultError(req, actionResult))
				writeJSONInternalServerError(w, options.errorLogger)
				return
			}
		})

{{/operation}}
{{/operations}}{{/apis}}
		return router
	}, nil
}

type middlewareOptions struct {
	actions          Actions
	errorLogger      func(error)
}

// MiddlewareOption の NewMiddleware の引数として渡せるオプション
type MiddlewareOption func(*middlewareOptions) error

// WithActions は指定した各種 Action を使用するように設定する
func WithActions(actions Actions) MiddlewareOption {
	return func(opt *middlewareOptions) error {
		opt.actions = actions
		return nil
	}
}

// WithErrorLogger は Middleware 中で発生したエラーを指定した関数で記録するように設定する
func WithErrorLogger(logger func(error)) MiddlewareOption {
	return func(opt *middlewareOptions) error {
		opt.errorLogger = logger
		return nil
	}
}{{/apiInfo}}
